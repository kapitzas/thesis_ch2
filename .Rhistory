vnm_stack[[j]] <- mask(crop(f, mask_vnm), mask_vnm)
unlink(paste0(download_path, "/cmip5"), recursive = TRUE)
}
save(vnm_stack, file = paste0(temp_folder, "/vnm_", models[i], ".rda"))
save(aus_stack, file = paste0(temp_folder, "/aus_", models[i], ".rda"))
rm(vnm_stack, aus_stack)
}
for(i in 1:length(regions)){
load(paste0("/Users/simon/Dropbox/PhD/Chapter 1/RData/mask_", regions[i], ".rda"))
assign(paste0("mask_", regions[i]), mask)
}
for(i in 1:length(models)){
aus_stack <- list()
vnm_stack <- list()
for (j in 1:3){
f <- tryCatch(getData("CMIP5", rcp = scens[j], year = 70, model = models[i], res = res, var = "bio", path = temp_folder), error = function (e) NA)
if(is.na(f)){next}
aus_stack[[j]] <- mask(crop(f, mask_aus), mask_aus)
vnm_stack[[j]] <- mask(crop(f, mask_vnm), mask_vnm)
unlink(paste0(temp_folder, "/cmip5"), recursive = TRUE)
}
save(vnm_stack, file = paste0(temp_folder, "/vnm_", models[i], ".rda"))
save(aus_stack, file = paste0(temp_folder, "/aus_", models[i], ".rda"))
rm(vnm_stack, aus_stack)
}
for (j in 2:3){
f <- tryCatch(getData("CMIP5", rcp = scens[j], year = 70, model = models[i], res = res, var = "bio", path = temp_folder), error = function (e) NA)
if(is.na(f)){next}
aus_stack[[j]] <- mask(crop(f, mask_aus), mask_aus)
vnm_stack[[j]] <- mask(crop(f, mask_vnm), mask_vnm)
unlink(paste0(temp_folder, "/cmip5"), recursive = TRUE)
}
i <- 2
for (j in 1:3){
f <- tryCatch(getData("CMIP5", rcp = scens[j], year = 70, model = models[i], res = res, var = "bio", path = temp_folder), error = function (e) NA)
if(is.na(f)){next}
aus_stack[[j]] <- mask(crop(f, mask_aus), mask_aus)
vnm_stack[[j]] <- mask(crop(f, mask_vnm), mask_vnm)
unlink(paste0(temp_folder, "/cmip5"), recursive = TRUE)
}
#Get future models
temp_folder <- "~/Dropbox/PhD/Chapter 1/temp"
dir.create(temp_folder)
res = 0.5
scens <- c("26", "45", "85")
models <- c("BC", "CC", "CN", "GS", "HD", "HE", "IP", "MI", "MR", "MC", "MG", "NO")
download_path <- "~/Desktop/local_rasters"
regions <- c("til", "aus", "vnm")
for(i in 1:length(regions)){
load(paste0("/Users/simon/Dropbox/PhD/Chapter 1/RData/mask_", regions[i], ".rda"))
assign(paste0("mask_", regions[i]), mask)
}
for(i in 1:length(models)){
aus_stack <- list()
vnm_stack <- list()
for (j in 1:3){
f <- tryCatch(getData("CMIP5", rcp = scens[j], year = 70, model = models[i], res = res, var = "bio", path = temp_folder), error = function (e) NA)
if(is.na(f)){next}
aus_stack[[j]] <- mask(crop(f, mask_aus), mask_aus)
vnm_stack[[j]] <- mask(crop(f, mask_vnm), mask_vnm)
unlink(paste0(temp_folder, "/cmip5"), recursive = TRUE)
}
save(vnm_stack, file = paste0(temp_folder, "/vnm_", models[i], ".rda"))
save(aus_stack, file = paste0(temp_folder, "/aus_", models[i], ".rda"))
rm(vnm_stack, aus_stack)
}
getData("CMIP5", rcp = scens[j], year = 70, model = models[i], res = res, var = "bio", path = temp_folder)
rm(list = ls())
gc()
library("data.table")
library('raster')
library('rgdal')
source("~/Dropbox/PhD/Chapter 1/R/1_functions.R")
country_abbr <- "til"
load(paste0("~/Dropbox/PhD/Chapter 1/RData/mask_", country_abbr, ".rda"))
layer_path <- "~/Dropbox/PhD/Chapter 1/RData/"
# 1.b) Select country and load GBIF data
#load all covariate layers (to find out NAs)
occ <- as.data.frame(fread(paste0("~/Dropbox/PhD - Large Files/PhD - Raw Data/GBIF/gbif_aves_", country_abbr, ".csv"), header = T, select = c("decimallongitude", "decimallatitude", "species"), na.strings=c("NA", "", " ")))
if(country_abbr == "til"){
occ_vnm <- fread(paste0("~/Dropbox/PhD - Large Files/PhD - Raw Data/GBIF/gbif_aves_vnm.csv"), header = T, select = c("decimallongitude", "decimallatitude", "species", na.strings=c("NA", "", " ")))
}
#2) PROCESS GBIF DATA####
species <- unique(occ$species)
occ2 <- data.frame()
#2.a) Find exact spatial duplicates and remove
for (i in 1:length(species)) {
spec_inds <- which(occ$species == species[i])
values <- extract(mask, occ[spec_inds, c(1,2)], cellnumbers = T)
occ2 <- rbind(occ2, occ[spec_inds[which(!duplicated(values[,1]))],])
print(i)
}
#remove entries with less than 2 dec places (because their precision is ca. below 1km2)
lis <- strsplit(sub('0+$', '', as.character(occ$decimallongitude)), ".", fixed = TRUE)
out <- sapply(lis, function(x) nchar(x[2]))
lis <- strsplit(sub('0+$', '', as.character(occ$decimallatitude)), ".", fixed = TRUE)
out2 <- sapply(lis, function(x) nchar(x[2]))
unprecise <- which(out < 2 | out2 < 2)
if(length(unprecise) > 0) { pointd <- pointd[-unprecise,] }
unprecise
if(length(unprecise) > 0) { occ2 <- occ2[-unprecise,] }
occ2 <- data.frame()
#2.a) Find exact spatial duplicates and remove
for (i in 1:length(species)) {
spec_inds <- which(occ$species == species[i])
values <- extract(mask, occ[spec_inds, c(1,2)], cellnumbers = T)
occ2 <- rbind(occ2, occ[spec_inds[which(!duplicated(values[,1]))],])
print(i)
}
#remove entries with less than 2 dec places (because their precision is ca. below 1km2)
lis <- strsplit(sub('0+$', '', as.character(occ2$decimallongitude)), ".", fixed = TRUE)
out <- sapply(lis, function(x) nchar(x[2]))
lis <- strsplit(sub('0+$', '', as.character(occ2$decimallatitude)), ".", fixed = TRUE)
out2 <- sapply(lis, function(x) nchar(x[2]))
unprecise <- which(out < 2 | out2 < 2)
if(length(unprecise) > 0) { occ2 <- occ2[-unprecise,] }
#remove entries with less than 2 dec places (because their precision is ca. below 1km2)
lis <- strsplit(sub('0+$', '', as.character(occ2$decimallongitude)), ".", fixed = TRUE)
out <- sapply(lis, function(x) nchar(x[2]))
lis <- strsplit(sub('0+$', '', as.character(occ2$decimallatitude)), ".", fixed = TRUE)
out2 <- sapply(lis, function(x) nchar(x[2]))
unprecise <- which(out < 2 | out2 < 2)
if(length(unprecise) > 0) { occ2 <- occ2[-unprecise,] }
#2.c) check that all obs are in locations with data and remove obs where that isn't the case
bgp <- SpatialPoints(occ2[,c(1,2)])
preds_obs <- extract(mask, bgp)
occ2 <- occ2[-which(is.na(preds_obs)),]
#filter for > 20 occurrences
occ3 <- occ2[occ2$species%in%names(which(table(occ2$species) >= 20)),]
min(table(occ3$species)) >= 20
species_left <- unique(occ3$species)
spnums <- table(occ3$species)
dat <- occ3
names(dat) <- c("long","lat","species") #column names
#Subset the ones only occuring in vnm
if(country_abbr == "til"){
specs <- unique(dat$species)
specs <- specs[which(specs%in%unique(occ_vnm$species))]
dat <- dat[dat$species%in%specs,]
}
unique(dat$species)
save(dat, file = paste0(layer_path, "/occ_", country_abbr, ".rda"))
#Elevation, slope and roughness
srtm <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/srtm_aus_vnm_tile29.tif"))
srtm <- crop(srtm, mask)
names(srtm) <- "srtm"
extent(srtm) <- extent(mask)
elevation <- mask(srtm, mask)
slope <- terrain(srtm, opt = "slope")
roughness <- terrain(srtm, opt = "roughness")
terrain <- stack(elevation, slope, roughness)
names <- c( "bulk", "awco", "carb",  "nitro")
soil <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/soil_data/data", pattern = "*.dat", full.names = T)))
crs(soil) <- crs(mask)
soil <- crop(soil, mask)
soil <- projectRaster(soil, mask)
soil <- mask(soil, mask)
names(soil) <- names
distances <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[-6]))
distances <- mask(distances, mask)
names(distances) <- c("dibu", "dico", "dila", "diri", "diro")
pa <- readAll(raster(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[6]))
names(pa) <- "pa"
pa <- mask(pa, mask)
r <- getAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/Pop_density/gluds00ag.bil"))
r <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/Pop_density/gluds00ag.bil"))
r <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/Pop_density/gluds00ag.bil"))
pop_dens <- crop(r, mask, snap = "near")
extent(pop_dens) <- extent(mask)
popdens <- mask(pop_dens, mask)
#6) LAND USE####
world_lu <- raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/LCType.tif")
lu <- crop(world_lu, mask)
lu <- projectRaster(lu, mask, method = "ngb")
lu <- mask(lu, mask)
lu[lu[]%in%c(12,14)] <- 100
lu[lu[]%in%c(6, 7,9,10,8)] <- 200
lu[lu[]%in%c(1,2,3,4,5)] <- 300
lu[lu[]%in%c(13)] <- 400
lu[lu[]%in%c(11,15,16,0)] <- 500
lu <- lu/100 - 1
table(lu[])
#1. a) Australia: load tiles from raw data, mosaic, crop and write
if(country_abbr == "aus"){
tiles <- c("39", "310", "311", "49", "410", "411")
}else if(country_abbr%in%c("vnm", "til")){
tiles <- "29"
}
temp_folder <- "~/Dropbox/PhD/Chapter 1/temp"
dir.create(temp_folder)
wc <- get_wctiles(tile = tiles, var = "bio", path = temp_folder)
wc2 <- merge_wctiles(wc)
names(wc2) <- paste0("bio",c(1:19))
wc2 <- crop(wc2, mask)
wc2 <- mask(wc2, mask)
bioclim <- wc2
save(bioclim, file = paste0(layer_path, "bioclim_", country_abbr, ".rda"))
unlink(temp_folder, recursive = T)
stack(terrain, soil, distances, pa, popdens)
out <- stack(terrain, soil, distances, pa, popdens, bioclim,lu)
names(out)
names(popdens) <- "popd"
names(lu)
names(lu) <- "landuse"
out <- stack(terrain, soil, distances, pa, popdens, bioclim,lu)
covariates <- stack(terrain, soil, distances, pa, popdens, bioclim,lu)
save(covariates, file = paste0(layer_path, "bioclim_", country_abbr, ".rda"))
save(covariates, file = paste0(layer_path, "covariates_", country_abbr, ".rda"))
country_abbr <- "vnm"
load(paste0("~/Dropbox/PhD/Chapter 1/RData/mask_", country_abbr, ".rda"))
layer_path <- "~/Dropbox/PhD/Chapter 1/RData/"
# 1.b) Select country and load GBIF data
#load all covariate layers (to find out NAs)
occ <- as.data.frame(fread(paste0("~/Dropbox/PhD - Large Files/PhD - Raw Data/GBIF/gbif_aves_", country_abbr, ".csv"), header = T, select = c("decimallongitude", "decimallatitude", "species"), na.strings=c("NA", "", " ")))
if(country_abbr == "til"){
occ_vnm <- fread(paste0("~/Dropbox/PhD - Large Files/PhD - Raw Data/GBIF/gbif_aves_vnm.csv"), header = T, select = c("decimallongitude", "decimallatitude", "species", na.strings=c("NA", "", " ")))
}
#2) PROCESS GBIF DATA####
species <- unique(occ$species)
occ2 <- data.frame()
#2.a) Find exact spatial duplicates and remove
for (i in 1:length(species)) {
spec_inds <- which(occ$species == species[i])
values <- extract(mask, occ[spec_inds, c(1,2)], cellnumbers = T)
occ2 <- rbind(occ2, occ[spec_inds[which(!duplicated(values[,1]))],])
print(i)
}
#remove entries with less than 2 dec places (because their precision is ca. below 1km2)
lis <- strsplit(sub('0+$', '', as.character(occ2$decimallongitude)), ".", fixed = TRUE)
out <- sapply(lis, function(x) nchar(x[2]))
lis <- strsplit(sub('0+$', '', as.character(occ2$decimallatitude)), ".", fixed = TRUE)
out2 <- sapply(lis, function(x) nchar(x[2]))
unprecise <- which(out < 2 | out2 < 2)
if(length(unprecise) > 0) { occ2 <- occ2[-unprecise,] }
#2.c) check that all obs are in locations with data and remove obs where that isn't the case
bgp <- SpatialPoints(occ2[,c(1,2)])
preds_obs <- extract(mask, bgp)
occ2 <- occ2[-which(is.na(preds_obs)),]
#filter for > 20 occurrences
occ3 <- occ2[occ2$species%in%names(which(table(occ2$species) >= 20)),]
min(table(occ3$species)) >= 20
species_left <- unique(occ3$species)
spnums <- table(occ3$species)
dat <- occ3
names(dat) <- c("long","lat","species") #column names
#Subset the ones only occuring in vnm
if(country_abbr == "til"){
specs <- unique(dat$species)
specs <- specs[which(specs%in%unique(occ_vnm$species))]
dat <- dat[dat$species%in%specs,]
}
save(dat, file = paste0(layer_path, "/occ_", country_abbr, ".rda"))
#Elevation, slope and roughness
srtm <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/srtm_aus_vnm_tile29.tif"))
srtm <- crop(srtm, mask)
names(srtm) <- "srtm"
extent(srtm) <- extent(mask)
elevation <- mask(srtm, mask)
slope <- terrain(srtm, opt = "slope")
roughness <- terrain(srtm, opt = "roughness")
terrain <- stack(elevation, slope, roughness)
names <- c( "bulk", "awco", "carb",  "nitro")
soil <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/soil_data/data", pattern = "*.dat", full.names = T)))
crs(soil) <- crs(mask)
soil <- crop(soil, mask)
soil <- projectRaster(soil, mask)
soil <- mask(soil, mask)
names(soil) <- names
distances <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[-6]))
distances <- mask(distances, mask)
names(distances) <- c("dibu", "dico", "dila", "diri", "diro")
pa <- readAll(raster(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[6]))
names(pa) <- "pa"
pa <- mask(pa, mask)
r <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/Pop_density/gluds00ag.bil"))
pop_dens <- crop(r, mask, snap = "near")
extent(pop_dens) <- extent(mask)
popdens <- mask(pop_dens, mask)
names(popdens) <- "popd"
#6) LAND USE####
world_lu <- raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/LCType.tif")
lu <- crop(world_lu, mask)
lu <- projectRaster(lu, mask, method = "ngb")
lu <- mask(lu, mask)
lu[lu[]%in%c(12,14)] <- 100
lu[lu[]%in%c(6, 7,9,10,8)] <- 200
lu[lu[]%in%c(1,2,3,4,5)] <- 300
lu[lu[]%in%c(13)] <- 400
lu[lu[]%in%c(11,15,16,0)] <- 500
lu <- lu/100 - 1
table(lu[])
names(lu) <- "landuse"
#1. a) Australia: load tiles from raw data, mosaic, crop and write
if(country_abbr == "aus"){
tiles <- c("39", "310", "311", "49", "410", "411")
}else if(country_abbr%in%c("vnm", "til")){
tiles <- "29"
}
temp_folder <- "~/Dropbox/PhD/Chapter 1/temp"
dir.create(temp_folder)
dir.create(temp_folder)
wc <- get_wctiles(tile = tiles, var = "bio", path = temp_folder)
wc2 <- merge_wctiles(wc)
names(wc2) <- paste0("bio",c(1:19))
wc2 <- crop(wc2, mask)
wc2 <- mask(wc2, mask)
bioclim <- wc2
#
unlink(temp_folder, recursive = T)
rm(bioclim)
bioclim <- wc2
covariates <- stack(terrain, soil, distances, pa, popdens, bioclim,lu)
save(covariates, file = paste0(layer_path, "covariates_", country_abbr, ".rda"))
source("~/Dropbox/PhD/Chapter 1/R/1_functions.R")
country_abbr <- "aus"
load(paste0("~/Dropbox/PhD/Chapter 1/RData/mask_", country_abbr, ".rda"))
layer_path <- "~/Dropbox/PhD/Chapter 1/RData/"
# 1.b) Select country and load GBIF data
#load all covariate layers (to find out NAs)
occ <- as.data.frame(fread(paste0("~/Dropbox/PhD - Large Files/PhD - Raw Data/GBIF/gbif_aves_", country_abbr, ".csv"), header = T, select = c("decimallongitude", "decimallatitude", "species"), na.strings=c("NA", "", " ")))
if(country_abbr == "til"){
occ_vnm <- fread(paste0("~/Dropbox/PhD - Large Files/PhD - Raw Data/GBIF/gbif_aves_vnm.csv"), header = T, select = c("decimallongitude", "decimallatitude", "species", na.strings=c("NA", "", " ")))
}
#2) PROCESS GBIF DATA####
species <- unique(occ$species)
occ2 <- data.frame()
#2.a) Find exact spatial duplicates and remove
for (i in 1:length(species)) {
spec_inds <- which(occ$species == species[i])
values <- extract(mask, occ[spec_inds, c(1,2)], cellnumbers = T)
occ2 <- rbind(occ2, occ[spec_inds[which(!duplicated(values[,1]))],])
print(i)
}
#remove entries with less than 2 dec places (because their precision is ca. below 1km2)
lis <- strsplit(sub('0+$', '', as.character(occ2$decimallongitude)), ".", fixed = TRUE)
out <- sapply(lis, function(x) nchar(x[2]))
lis <- strsplit(sub('0+$', '', as.character(occ2$decimallatitude)), ".", fixed = TRUE)
out2 <- sapply(lis, function(x) nchar(x[2]))
unprecise <- which(out < 2 | out2 < 2)
if(length(unprecise) > 0) { occ2 <- occ2[-unprecise,] }
#2.c) check that all obs are in locations with data and remove obs where that isn't the case
bgp <- SpatialPoints(occ2[,c(1,2)])
preds_obs <- extract(mask, bgp)
occ2 <- occ2[-which(is.na(preds_obs)),]
#filter for > 20 occurrences
occ3 <- occ2[occ2$species%in%names(which(table(occ2$species) >= 20)),]
min(table(occ3$species)) >= 20
species_left <- unique(occ3$species)
species_left <- unique(occ3$species)
species_left
spnums <- table(occ3$species)
spnums
dat <- occ3
names(dat) <- c("long","lat","species") #column names
#Subset the ones only occuring in vnm
if(country_abbr == "til"){
specs <- unique(dat$species)
specs <- specs[which(specs%in%unique(occ_vnm$species))]
dat <- dat[dat$species%in%specs,]
}
save(dat, file = paste0(layer_path, "/occ_", country_abbr, ".rda"))
#Elevation, slope and roughness
srtm <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/srtm_aus_vnm_tile29.tif"))
srtm <- crop(srtm, mask)
names(srtm) <- "srtm"
extent(srtm) <- extent(mask)
elevation <- mask(srtm, mask)
slope <- terrain(srtm, opt = "slope")
roughness <- terrain(srtm, opt = "roughness")
terrain <- stack(elevation, slope, roughness)
names <- c( "bulk", "awco", "carb",  "nitro")
soil <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/soil_data/data", pattern = "*.dat", full.names = T)))
crs(soil) <- crs(mask)
soil <- crop(soil, mask)
soil <- projectRaster(soil, mask)
soil <- mask(soil, mask)
names(soil) <- names
distances <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[-6]))
distances <- mask(distances, mask)
rm(list = ls())
gc()
library("data.table")
library('raster')
library('rgdal')
library("rgeos")
country_abbr <- "aus"
source("~/Dropbox/PhD/Chapter 1/R/1_functions.R")
load(paste0("~/Dropbox/PhD/Chapter 1/RData/mask_", country_abbr, ".rda"))
layer_path <- "~/Dropbox/PhD/Chapter 1/RData/"
#Elevation, slope and roughness
srtm <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/srtm_aus_vnm_tile29.tif"))
srtm <- crop(srtm, mask)
names(srtm) <- "srtm"
extent(srtm) <- extent(mask)
elevation <- mask(srtm, mask)
slope <- terrain(srtm, opt = "slope")
roughness <- terrain(srtm, opt = "roughness")
terrain <- stack(elevation, slope, roughness)
names <- c( "bulk", "awco", "carb",  "nitro")
soil <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/soil_data/data", pattern = "*.dat", full.names = T)))
crs(soil) <- crs(mask)
soil <- crop(soil, mask)
soil <- projectRaster(soil, mask)
soil <- mask(soil, mask)
names(soil) <- names
distances <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[-6]))
distances <- mask(distances, mask)
names(distances) <- c("dibu", "dico", "dila", "diri", "diro")
pa <- readAll(raster(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[6]))
names(pa) <- "pa"
pa <- mask(pa, mask)
r <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/Pop_density/gluds00ag.bil"))
pop_dens <- crop(r, mask, snap = "near")
extent(pop_dens) <- extent(mask)
popdens <- mask(pop_dens, mask)
names(popdens) <- "popd"
#6) LAND USE####
world_lu <- raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/LCType.tif")
lu <- crop(world_lu, mask)
rm(list = ls())
gc()
library("data.table")
library('raster')
library('rgdal')
library("rgeos")
source("~/Dropbox/PhD/Chapter 1/R/1_functions.R")
country_abbr <- "aus"
load(paste0("~/Dropbox/PhD/Chapter 1/RData/mask_", country_abbr, ".rda"))
layer_path <- "~/Dropbox/PhD/Chapter 1/RData/"
#Elevation, slope and roughness
srtm <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/srtm_aus_vnm_tile29.tif"))
srtm <- crop(srtm, mask)
names(srtm) <- "srtm"
extent(srtm) <- extent(mask)
elevation <- mask(srtm, mask)
slope <- terrain(srtm, opt = "slope")
roughness <- terrain(srtm, opt = "roughness")
terrain <- stack(elevation, slope, roughness)
soil <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/soil_data/data", pattern = "*.dat", full.names = T)))
crs(soil) <- crs(mask)
soil <- crop(soil, mask)
soil <- projectRaster(soil, mask)
soil <- mask(soil, mask)
names(soil) <- c( "bulk", "awco", "carb",  "nitro")
distances <- readAll(stack(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[-6]))
distances <- mask(distances, mask)
names(distances) <- c("dibu", "dico", "dila", "diri", "diro")
rm(elevation, roughness, slope, srtm)
pa <- readAll(raster(list.files("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/preprocessed/", full.names = T, pattern = country_abbr)[6]))
names(pa) <- "pa"
pa <- mask(pa, mask)
pop_dens <- readAll(raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/Pop_density/gluds00ag.bil"))
pop_dens <- raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/Pop_density/gluds00ag.bil")
pop_dens
pop_dens <- crop(pop_dens, mask, snap = "near")
pop_dens
extent(pop_dens) <- extent(mask)
popdens <- mask(pop_dens, mask)
names(popdens) <- "popd"
#6) LAND USE####
world_lu <- raster("~/Dropbox/PhD - Large Files/PhD - Raw Data/Global/LCType.tif")
lu <- crop(world_lu, mask)
lu <- projectRaster(lu, mask, method = "ngb")
lu <- mask(lu, mask)
lu[lu[]%in%c(12,14)] <- 100
lu[lu[]%in%c(6, 7,9,10,8)] <- 200
lu[lu[]%in%c(1,2,3,4,5)] <- 300
lu[lu[]%in%c(13)] <- 400
lu[lu[]%in%c(11,15,16,0)] <- 500
lu <- lu/100 - 1
table(lu[])
names(lu) <- "landuse"
#1. a) Australia: load tiles from raw data, mosaic, crop and write
if(country_abbr == "aus"){
tiles <- c("39", "310", "311", "49", "410", "411")
}else if(country_abbr%in%c("vnm", "til")){
tiles <- "29"
}
temp_folder <- "~/Dropbox/PhD/Chapter 1/temp"
dir.create(temp_folder)
wc <- get_wctiles(tile = tiles, var = "bio", path = temp_folder)
wc2 <- merge_wctiles(wc)
names(wc2)
names(wc2) <- paste0("bio",c(1:19))
names(wc2)
wc2 <- crop(wc2, mask)
wc2 <- mask(wc2, mask)
bioclim <- wc2
covariates <- stack(terrain, soil, distances, pa, popdens, bioclim,lu)
save(covariates, file = paste0(layer_path, "covariates_", country_abbr, ".rda"))
require(matrixStats)
require("pBrackets")
require(RColorBrewer)
inch <- 0.393701 # one inch
#figure widths 183 89
path_plots <- file.path(".", "output", "plots")
in_path <- file.path(".", "RData")
out_path <- file.path(".", "output")
scenarios <- scens <- c(paste0("q1", c("_26", "_85")), paste0("q2", c("_26", "_85")), paste0("q3", c("_26", "_85")))
treatments <- c("pres", paste0("ind_", scenarios), paste0("dir_", scenarios), paste0("inddir_",scenarios))
ca <- c("aus", "til")
#Get AUC values
auc_list <- list()
exclude_list <- list()
for(j in 1:2){
res <- readRDS(file.path(out_path, paste0("results_", ca[j], ".rds")))
auc_list[[j]] <- numeric()
for(i in 1:length(res)){
auc_list[[j]][i] <- res[[i]][[1]][,1][which(names(res[[i]][[1]][,1]) == "Test.AUC")]
}
exclude_list[[j]] <- which(auc_list[[j]] < 0.7)
}
